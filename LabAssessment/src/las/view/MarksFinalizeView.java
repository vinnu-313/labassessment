/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package las.view;

import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import las.config.MyConnection;

/**
 *
 * @author santu
 */
public class MarksFinalizeView extends javax.swing.JDialog {

    /**
     * Creates new form MarksFinalizeView
     */
    float total = 0;
    float marks1 = 0;
    float marks2 = 0;
    float marks3 = 0;
    float marks4 = 0;
    float marks5 = 0;
    float marks6 = 0;
    float marks7 = 0;
    float marks8 = 0;
    float marks9 = 0;
    float marks10 = 0;
    float writeup = 0;
    float execution = 0;
    float viva = 0;

    public MarksFinalizeView(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleSeperator = new javax.swing.JSeparator();
        question1Label = new javax.swing.JLabel();
        question2Label = new javax.swing.JLabel();
        question3Label = new javax.swing.JLabel();
        question4Label = new javax.swing.JLabel();
        question5Label = new javax.swing.JLabel();
        question6Label = new javax.swing.JLabel();
        question7Label = new javax.swing.JLabel();
        question8Label = new javax.swing.JLabel();
        question9Label = new javax.swing.JLabel();
        question10Label = new javax.swing.JLabel();
        question1Scroll = new javax.swing.JScrollPane();
        question1TextArea = new javax.swing.JTextArea();
        marks1TextField = new javax.swing.JTextField();
        QuestionLabel = new javax.swing.JLabel();
        AnswerLabel = new javax.swing.JLabel();
        MarksLabel = new javax.swing.JLabel();
        question2Scroll = new javax.swing.JScrollPane();
        question2TextArea = new javax.swing.JTextArea();
        marks2TextField = new javax.swing.JTextField();
        question3Scroll = new javax.swing.JScrollPane();
        question3TextArea = new javax.swing.JTextArea();
        marks3TextField = new javax.swing.JTextField();
        marks4TextField = new javax.swing.JTextField();
        question4Scroll = new javax.swing.JScrollPane();
        question4TextArea = new javax.swing.JTextArea();
        question5Scroll = new javax.swing.JScrollPane();
        question5TextArea = new javax.swing.JTextArea();
        marks5TextField = new javax.swing.JTextField();
        question6Scroll = new javax.swing.JScrollPane();
        question6TextArea = new javax.swing.JTextArea();
        marks6TextField = new javax.swing.JTextField();
        question7Scroll = new javax.swing.JScrollPane();
        question7TextArea = new javax.swing.JTextArea();
        marks7TextField = new javax.swing.JTextField();
        question8Scroll = new javax.swing.JScrollPane();
        question8TextArea = new javax.swing.JTextArea();
        marks8TextField = new javax.swing.JTextField();
        marks9TextField = new javax.swing.JTextField();
        question9Scroll = new javax.swing.JScrollPane();
        question9TextArea = new javax.swing.JTextArea();
        question10Scroll = new javax.swing.JScrollPane();
        question10TextArea = new javax.swing.JTextArea();
        marks10TextField = new javax.swing.JTextField();
        UsnLabel = new javax.swing.JLabel();
        UsnTextField = new javax.swing.JTextField();
        fetchButton = new javax.swing.JButton();
        writeupLabel = new javax.swing.JLabel();
        writeUpTextField = new javax.swing.JTextField();
        executionTextField = new javax.swing.JTextField();
        executionLabel = new javax.swing.JLabel();
        vivaLabel = new javax.swing.JLabel();
        vivaTextField = new javax.swing.JTextField();
        totalLabel = new javax.swing.JLabel();
        totalField = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Marks Entry - Lab Assessment System v1.0");

        question1Label.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        question1Label.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        question1Label.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        question2Label.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        question2Label.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        question2Label.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        question3Label.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        question3Label.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        question3Label.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        question4Label.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        question4Label.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        question4Label.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        question5Label.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        question5Label.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        question5Label.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        question6Label.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        question6Label.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        question6Label.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        question7Label.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        question7Label.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        question7Label.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        question8Label.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        question8Label.setToolTipText("");
        question8Label.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        question8Label.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        question9Label.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        question9Label.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        question9Label.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        question10Label.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        question10Label.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        question10Label.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        question1TextArea.setColumns(20);
        question1TextArea.setEditable(false);
        question1TextArea.setRows(5);
        question1Scroll.setViewportView(question1TextArea);

        marks1TextField.setEnabled(false);
        marks1TextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                marks1TextFieldFocusLost(evt);
            }
        });

        QuestionLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        QuestionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        QuestionLabel.setText("Question");

        AnswerLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        AnswerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        AnswerLabel.setText("Answer");

        MarksLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        MarksLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MarksLabel.setText("Marks");

        question2TextArea.setColumns(20);
        question2TextArea.setEditable(false);
        question2TextArea.setRows(5);
        question2Scroll.setViewportView(question2TextArea);

        marks2TextField.setEnabled(false);
        marks2TextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                marks2TextFieldFocusLost(evt);
            }
        });

        question3TextArea.setColumns(20);
        question3TextArea.setEditable(false);
        question3TextArea.setRows(5);
        question3Scroll.setViewportView(question3TextArea);

        marks3TextField.setEnabled(false);
        marks3TextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                marks3TextFieldFocusLost(evt);
            }
        });

        marks4TextField.setEnabled(false);
        marks4TextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                marks4TextFieldFocusLost(evt);
            }
        });

        question4TextArea.setColumns(20);
        question4TextArea.setEditable(false);
        question4TextArea.setRows(5);
        question4Scroll.setViewportView(question4TextArea);

        question5TextArea.setColumns(20);
        question5TextArea.setEditable(false);
        question5TextArea.setRows(5);
        question5Scroll.setViewportView(question5TextArea);

        marks5TextField.setEnabled(false);
        marks5TextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                marks5TextFieldFocusLost(evt);
            }
        });

        question6TextArea.setColumns(20);
        question6TextArea.setEditable(false);
        question6TextArea.setRows(5);
        question6Scroll.setViewportView(question6TextArea);

        marks6TextField.setEnabled(false);
        marks6TextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                marks6TextFieldFocusLost(evt);
            }
        });

        question7TextArea.setColumns(20);
        question7TextArea.setEditable(false);
        question7TextArea.setRows(5);
        question7Scroll.setViewportView(question7TextArea);

        marks7TextField.setEnabled(false);
        marks7TextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                marks7TextFieldFocusLost(evt);
            }
        });

        question8TextArea.setColumns(20);
        question8TextArea.setEditable(false);
        question8TextArea.setRows(5);
        question8Scroll.setViewportView(question8TextArea);

        marks8TextField.setEnabled(false);
        marks8TextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                marks8TextFieldFocusLost(evt);
            }
        });

        marks9TextField.setEnabled(false);
        marks9TextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                marks9TextFieldFocusLost(evt);
            }
        });

        question9TextArea.setColumns(20);
        question9TextArea.setEditable(false);
        question9TextArea.setRows(5);
        question9Scroll.setViewportView(question9TextArea);

        question10TextArea.setColumns(20);
        question10TextArea.setEditable(false);
        question10TextArea.setRows(5);
        question10Scroll.setViewportView(question10TextArea);

        marks10TextField.setEnabled(false);
        marks10TextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                marks10TextFieldFocusLost(evt);
            }
        });

        UsnLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        UsnLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        UsnLabel.setText("USN : ");

        UsnTextField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        UsnTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                UsnTextFieldFocusLost(evt);
            }
        });

        fetchButton.setText("Fetch Details");
        fetchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fetchButtonActionPerformed(evt);
            }
        });

        writeupLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        writeupLabel.setText("Write Up Marks :");

        writeUpTextField.setEnabled(false);
        writeUpTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                writeUpTextFieldFocusLost(evt);
            }
        });

        executionTextField.setEnabled(false);
        executionTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                executionTextFieldFocusLost(evt);
            }
        });

        executionLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        executionLabel.setText("Execution Marks : ");

        vivaLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        vivaLabel.setText("Viva Marks : ");

        vivaTextField.setEditable(false);
        vivaTextField.setText("0");

        totalLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        totalLabel.setText("Total Marks : ");

        totalField.setEditable(false);
        totalField.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        totalField.setText("0");

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(titleSeperator)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(QuestionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AnswerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(question1Label, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(question1Scroll)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(MarksLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                            .addComponent(marks1TextField))
                        .addGap(22, 22, 22))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(UsnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(UsnTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fetchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(writeupLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(writeUpTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(executionLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(executionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(87, 87, 87)
                                        .addComponent(vivaLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(vivaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(totalLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(totalField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(5, 5, 5)
                                        .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(question10Label, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(question10Scroll))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(question9Label, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(question9Scroll))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(question8Label, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(question8Scroll))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(question7Label, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(question7Scroll))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(question6Label, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(question6Scroll))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(question5Label, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(question5Scroll))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(question4Label, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(question4Scroll))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(question3Label, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(question3Scroll))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(question2Label, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(question2Scroll)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(marks2TextField, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                                    .addComponent(marks3TextField)
                                    .addComponent(marks4TextField)
                                    .addComponent(marks5TextField)
                                    .addComponent(marks6TextField)
                                    .addComponent(marks7TextField)
                                    .addComponent(marks10TextField, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(marks9TextField, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(marks8TextField, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addContainerGap(22, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(UsnLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(UsnTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(fetchButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(titleSeperator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(QuestionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(AnswerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(MarksLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(marks1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(question1Scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(question1Label, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(question2Scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(question2Label, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE))
                    .addComponent(marks2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(marks3TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(question3Scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(question3Label, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(marks4TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(question4Label, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(question4Scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(question5Label, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(marks5TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(question5Scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(marks6TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(question6Scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(question6Label, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(question7Label, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                    .addComponent(marks7TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(question7Scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(question8Label, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                        .addComponent(question8Scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(marks8TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(question9Label, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                    .addComponent(marks9TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(question9Scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(question10Label, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(question10Scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(marks10TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(writeupLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(writeUpTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(executionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(executionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(vivaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(vivaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(totalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(totalField)
                    .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resetButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fetchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fetchButtonActionPerformed
        if (UsnTextField.getText().length() <= 0) {
            JOptionPane.showMessageDialog(rootPane, "Invalid USN !", "Error in Input", JOptionPane.ERROR_MESSAGE);
            question1Label.setText("");
            question1TextArea.setText("");
            question2Label.setText("");
            question2TextArea.setText("");
            question3Label.setText("");
            question3TextArea.setText("");
            question4Label.setText("");
            question4TextArea.setText("");
            question5Label.setText("");
            question5TextArea.setText("");
            question6Label.setText("");
            question6TextArea.setText("");
            question7Label.setText("");
            question7TextArea.setText("");
            question8Label.setText("");
            question8TextArea.setText("");
            question9Label.setText("");
            question9TextArea.setText("");
            question10Label.setText("");
            question10TextArea.setText("");
            marks1TextField.setEnabled(false);
            marks2TextField.setEnabled(false);
            marks3TextField.setEnabled(false);
            marks4TextField.setEnabled(false);
            marks5TextField.setEnabled(false);
            marks6TextField.setEnabled(false);
            marks7TextField.setEnabled(false);
            marks8TextField.setEnabled(false);
            marks9TextField.setEnabled(false);
            marks10TextField.setEnabled(false);
            writeUpTextField.setEnabled(false);
            executionTextField.setEnabled(false);
            marks1TextField.setText("");
            marks2TextField.setText("");
            marks3TextField.setText("");
            marks4TextField.setText("");
            marks5TextField.setText("");
            marks6TextField.setText("");
            marks7TextField.setText("");
            marks8TextField.setText("");
            marks9TextField.setText("");
            marks10TextField.setText("");
            writeUpTextField.setText("");
            executionTextField.setText("");
            vivaTextField.setText("");
            totalField.setText("");
        } else {
            try {
                Connection con = MyConnection.getConnection();
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery("select v.question, vm.answer from vivamap vm, viva v where vm.questionid = v.questionid and vm.usn = '" + UsnTextField.getText() + "'");
                if (rs.next()) {
                    question1Label.setText("Question 1 : " + rs.getString(1));
                    question1TextArea.setText(rs.getString(2));
                    rs.next();
                    question2Label.setText("Question 2 : " + rs.getString(1));
                    question2TextArea.setText(rs.getString(2));
                    rs.next();
                    question3Label.setText("Question 3 : " + rs.getString(1));
                    question3TextArea.setText(rs.getString(2));
                    rs.next();
                    question4Label.setText("Question 4 : " + rs.getString(1));
                    question4TextArea.setText(rs.getString(2));
                    rs.next();
                    question5Label.setText("Question 5 : " + rs.getString(1));
                    question5TextArea.setText(rs.getString(2));
                    rs.next();
                    question6Label.setText("Question 6 : " + rs.getString(1));
                    question6TextArea.setText(rs.getString(2));
                    rs.next();
                    question7Label.setText("Question 7 : " + rs.getString(1));
                    question7TextArea.setText(rs.getString(2));
                    rs.next();
                    question8Label.setText("Question 8 : " + rs.getString(1));
                    question8TextArea.setText(rs.getString(2));
                    rs.next();
                    question9Label.setText("Question 9 : " + rs.getString(1));
                    question9TextArea.setText(rs.getString(2));
                    rs.next();
                    question10Label.setText("Question 10 : " + rs.getString(1));
                    question10TextArea.setText(rs.getString(2));
                    marks1TextField.setEnabled(true);
                    marks2TextField.setEnabled(true);
                    marks3TextField.setEnabled(true);
                    marks4TextField.setEnabled(true);
                    marks5TextField.setEnabled(true);
                    marks6TextField.setEnabled(true);
                    marks7TextField.setEnabled(true);
                    marks8TextField.setEnabled(true);
                    marks9TextField.setEnabled(true);
                    marks10TextField.setEnabled(true);
                    writeUpTextField.setEnabled(true);
                    executionTextField.setEnabled(true);
                    marks1 = 0;
                    marks2 = 0;
                    marks3 = 0;
                    marks4 = 0;
                    marks5 = 0;
                    marks6 = 0;
                    marks7 = 0;
                    marks8 = 0;
                    marks9 = 0;
                    marks10 = 0;
                    writeup = 0;
                    execution = 0;
                    viva = 0;
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Invalid USN !", "Error in Input", JOptionPane.ERROR_MESSAGE);
                    question1Label.setText("");
                    question1TextArea.setText("");
                    question2Label.setText("");
                    question2TextArea.setText("");
                    question3Label.setText("");
                    question3TextArea.setText("");
                    question4Label.setText("");
                    question4TextArea.setText("");
                    question5Label.setText("");
                    question5TextArea.setText("");
                    question6Label.setText("");
                    question6TextArea.setText("");
                    question7Label.setText("");
                    question7TextArea.setText("");
                    question8Label.setText("");
                    question8TextArea.setText("");
                    question9Label.setText("");
                    question9TextArea.setText("");
                    question10Label.setText("");
                    question10TextArea.setText("");
                    marks1TextField.setText("");
                    marks2TextField.setText("");
                    marks3TextField.setText("");
                    marks4TextField.setText("");
                    marks5TextField.setText("");
                    marks6TextField.setText("");
                    marks7TextField.setText("");
                    marks8TextField.setText("");
                    marks9TextField.setText("");
                    marks10TextField.setText("");
                    marks1TextField.setEnabled(false);
                    marks2TextField.setEnabled(false);
                    marks3TextField.setEnabled(false);
                    marks4TextField.setEnabled(false);
                    marks5TextField.setEnabled(false);
                    marks6TextField.setEnabled(false);
                    marks7TextField.setEnabled(false);
                    marks8TextField.setEnabled(false);
                    marks9TextField.setEnabled(false);
                    marks10TextField.setEnabled(false);
                    writeUpTextField.setEnabled(false);
                    executionTextField.setEnabled(false);
                    writeUpTextField.setText("");
                    executionTextField.setText("");
                    vivaTextField.setText("");
                    totalField.setText("");
                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(MarksFinalizeView.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(MarksFinalizeView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_fetchButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void marks1TextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_marks1TextFieldFocusLost
        try {
            if (Float.parseFloat(marks1TextField.getText()) > 0) {
                Float sum = Float.parseFloat(vivaTextField.getText()) - marks1 + Float.parseFloat(marks1TextField.getText());
                vivaTextField.setText(sum.toString());
                marks1 = Float.parseFloat(marks1TextField.getText());
                total = total - viva + sum;
                totalField.setText(String.valueOf(Math.round(total)));
                viva = sum;
            }
        } catch (Exception e) {
            Logger.getLogger(MarksFinalizeView.class.getName()).log(Level.SEVERE, "Exception in marks1TextFieldHandler", e);
            JOptionPane.showMessageDialog(rootPane, "Invalid Marks !", "Error in Input", JOptionPane.ERROR_MESSAGE);
            marks1TextField.grabFocus();
        }
    }//GEN-LAST:event_marks1TextFieldFocusLost

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        UsnTextField.setText("");
        question1Label.setText("");
        question1TextArea.setText("");
        question2Label.setText("");
        question2TextArea.setText("");
        question3Label.setText("");
        question3TextArea.setText("");
        question4Label.setText("");
        question4TextArea.setText("");
        question5Label.setText("");
        question5TextArea.setText("");
        question6Label.setText("");
        question6TextArea.setText("");
        question7Label.setText("");
        question7TextArea.setText("");
        question8Label.setText("");
        question8TextArea.setText("");
        question9Label.setText("");
        question9TextArea.setText("");
        question10Label.setText("");
        question10TextArea.setText("");
        marks1TextField.setText("");
        marks2TextField.setText("");
        marks3TextField.setText("");
        marks4TextField.setText("");
        marks5TextField.setText("");
        marks6TextField.setText("");
        marks7TextField.setText("");
        marks8TextField.setText("");
        marks9TextField.setText("");
        marks10TextField.setText("");
        marks1TextField.setEnabled(false);
        marks2TextField.setEnabled(false);
        marks3TextField.setEnabled(false);
        marks4TextField.setEnabled(false);
        marks5TextField.setEnabled(false);
        marks6TextField.setEnabled(false);
        marks7TextField.setEnabled(false);
        marks8TextField.setEnabled(false);
        marks9TextField.setEnabled(false);
        marks10TextField.setEnabled(false);
        writeUpTextField.setEnabled(false);
        executionTextField.setEnabled(false);
        writeUpTextField.setText("");
        executionTextField.setText("");
        vivaTextField.setText("");
        totalField.setText("");
    }//GEN-LAST:event_resetButtonActionPerformed

    private void marks2TextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_marks2TextFieldFocusLost
        try {
            if (Float.parseFloat(marks2TextField.getText()) > 0) {
                Float sum = Float.parseFloat(vivaTextField.getText()) - marks2 + Float.parseFloat(marks2TextField.getText());
                vivaTextField.setText(sum.toString());
                marks2 = Float.parseFloat(marks2TextField.getText());
                total = total - viva + sum;
                totalField.setText(String.valueOf(Math.round(total)));
                viva = sum;
            }
        } catch (Exception e) {
            Logger.getLogger(MarksFinalizeView.class.getName()).log(Level.SEVERE, "Exception in marks2TextFieldHandler", e);
            JOptionPane.showMessageDialog(rootPane, "Invalid Marks !", "Error in Input", JOptionPane.ERROR_MESSAGE);
            marks2TextField.grabFocus();
        }
    }//GEN-LAST:event_marks2TextFieldFocusLost

    private void marks3TextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_marks3TextFieldFocusLost
        try {
            if (Float.parseFloat(marks3TextField.getText()) > 0) {
                Float sum = Float.parseFloat(vivaTextField.getText()) - marks3 + Float.parseFloat(marks3TextField.getText());
                vivaTextField.setText(sum.toString());
                marks3 = Float.parseFloat(marks3TextField.getText());
                total = total - viva + sum;
                totalField.setText(String.valueOf(Math.round(total)));
                viva = sum;
            }
        } catch (Exception e) {
            Logger.getLogger(MarksFinalizeView.class.getName()).log(Level.SEVERE, "Exception in marks3TextFieldHandler", e);
            JOptionPane.showMessageDialog(rootPane, "Invalid Marks !", "Error in Input", JOptionPane.ERROR_MESSAGE);
            marks3TextField.grabFocus();
        }

    }//GEN-LAST:event_marks3TextFieldFocusLost

    private void marks4TextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_marks4TextFieldFocusLost
        try {
            if (Float.parseFloat(marks4TextField.getText()) > 0) {
                Float sum = Float.parseFloat(vivaTextField.getText()) - marks4 + Float.parseFloat(marks4TextField.getText());
                vivaTextField.setText(sum.toString());
                marks4 = Float.parseFloat(marks4TextField.getText());
                total = total - viva + sum;
                totalField.setText(String.valueOf(Math.round(total)));
                viva = sum;
            }
        } catch (Exception e) {
            Logger.getLogger(MarksFinalizeView.class.getName()).log(Level.SEVERE, "Exception in marks4TextFieldHandler", e);
            JOptionPane.showMessageDialog(rootPane, "Invalid Marks !", "Error in Input", JOptionPane.ERROR_MESSAGE);
            marks4TextField.grabFocus();
        }
    }//GEN-LAST:event_marks4TextFieldFocusLost

    private void marks5TextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_marks5TextFieldFocusLost
        try {
            if (Float.parseFloat(marks5TextField.getText()) > 0) {
                Float sum = Float.parseFloat(vivaTextField.getText()) - marks5 + Float.parseFloat(marks5TextField.getText());
                vivaTextField.setText(sum.toString());
                marks5 = Float.parseFloat(marks5TextField.getText());
                total = total - viva + sum;
                totalField.setText(String.valueOf(Math.round(total)));
                viva = sum;
            }
        } catch (Exception e) {
            Logger.getLogger(MarksFinalizeView.class.getName()).log(Level.SEVERE, "Exception in marks5TextFieldHandler", e);
            JOptionPane.showMessageDialog(rootPane, "Invalid Marks !", "Error in Input", JOptionPane.ERROR_MESSAGE);
            marks5TextField.grabFocus();
        }
    }//GEN-LAST:event_marks5TextFieldFocusLost

    private void marks6TextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_marks6TextFieldFocusLost
        try {
            if (Float.parseFloat(marks6TextField.getText()) > 0) {
                Float sum = Float.parseFloat(vivaTextField.getText()) - marks6 + Float.parseFloat(marks6TextField.getText());
                vivaTextField.setText(sum.toString());
                marks6 = Float.parseFloat(marks6TextField.getText());
                total = total - viva + sum;
                totalField.setText(String.valueOf(Math.round(total)));
                viva = sum;
            }
        } catch (Exception e) {
            Logger.getLogger(MarksFinalizeView.class.getName()).log(Level.SEVERE, "Exception in marks6TextFieldHandler", e);
            JOptionPane.showMessageDialog(rootPane, "Invalid Marks !", "Error in Input", JOptionPane.ERROR_MESSAGE);
            marks6TextField.grabFocus();
        }
    }//GEN-LAST:event_marks6TextFieldFocusLost

    private void marks7TextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_marks7TextFieldFocusLost
        try {
            if (Float.parseFloat(marks7TextField.getText()) > 0) {
                Float sum = Float.parseFloat(vivaTextField.getText()) - marks7 + Float.parseFloat(marks7TextField.getText());
                vivaTextField.setText(sum.toString());
                marks7 = Float.parseFloat(marks7TextField.getText());
                total = total - viva + sum;
                totalField.setText(String.valueOf(Math.round(total)));
                viva = sum;
            }
        } catch (Exception e) {
            Logger.getLogger(MarksFinalizeView.class.getName()).log(Level.SEVERE, "Exception in marks7TextFieldHandler", e);
            JOptionPane.showMessageDialog(rootPane, "Invalid Marks !", "Error in Input", JOptionPane.ERROR_MESSAGE);
            marks7TextField.grabFocus();
        }
    }//GEN-LAST:event_marks7TextFieldFocusLost

    private void marks8TextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_marks8TextFieldFocusLost
        try {
            if (Float.parseFloat(marks8TextField.getText()) > 0) {
                Float sum = Float.parseFloat(vivaTextField.getText()) - marks8 + Float.parseFloat(marks8TextField.getText());
                vivaTextField.setText(sum.toString());
                marks8 = Float.parseFloat(marks8TextField.getText());
                total = total - viva + sum;
                totalField.setText(String.valueOf(Math.round(total)));
                viva = sum;
            }
        } catch (Exception e) {
            Logger.getLogger(MarksFinalizeView.class.getName()).log(Level.SEVERE, "Exception in marks8TextFieldHandler", e);
            JOptionPane.showMessageDialog(rootPane, "Invalid Marks !", "Error in Input", JOptionPane.ERROR_MESSAGE);
            marks8TextField.grabFocus();
        }
    }//GEN-LAST:event_marks8TextFieldFocusLost

    private void marks9TextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_marks9TextFieldFocusLost

        try {
            if (Float.parseFloat(marks9TextField.getText()) > 0) {
                Float sum = Float.parseFloat(vivaTextField.getText()) - marks9 + Float.parseFloat(marks9TextField.getText());
                vivaTextField.setText(sum.toString());
                marks9 = Float.parseFloat(marks9TextField.getText());
                total = total - viva + sum;
                totalField.setText(String.valueOf(Math.round(total)));
                viva = sum;
            }
        } catch (Exception e) {
            Logger.getLogger(MarksFinalizeView.class.getName()).log(Level.SEVERE, "Exception in marks9TextFieldHandler", e);
            JOptionPane.showMessageDialog(rootPane, "Invalid Marks !", "Error in Input", JOptionPane.ERROR_MESSAGE);
            marks9TextField.grabFocus();
        }
    }//GEN-LAST:event_marks9TextFieldFocusLost

    private void marks10TextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_marks10TextFieldFocusLost

        try {
            if (Float.parseFloat(marks10TextField.getText()) > 0) {
                Float sum = Float.parseFloat(vivaTextField.getText()) - marks10 + Float.parseFloat(marks10TextField.getText());
                vivaTextField.setText(sum.toString());
                marks10 = Float.parseFloat(marks10TextField.getText());
                total = total - viva + sum;
                totalField.setText(String.valueOf(Math.round(total)));
                viva = sum;
            }
        } catch (Exception e) {
            Logger.getLogger(MarksFinalizeView.class.getName()).log(Level.SEVERE, "Exception in marks10TextFieldHandler", e);
            JOptionPane.showMessageDialog(rootPane, "Invalid Marks !", "Error in Input", JOptionPane.ERROR_MESSAGE);
            marks10TextField.grabFocus();
        }
    }//GEN-LAST:event_marks10TextFieldFocusLost

    private void writeUpTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_writeUpTextFieldFocusLost
        try {
            if (Float.parseFloat(writeUpTextField.getText()) > 0) {
                total = total - writeup + Float.parseFloat(writeUpTextField.getText());
                totalField.setText(String.valueOf(Math.round(total)));
                writeup = Float.parseFloat(writeUpTextField.getText());
            }
        } catch (Exception e) {
            Logger.getLogger(MarksFinalizeView.class.getName()).log(Level.SEVERE, "Exception in writeUpTextFieldHandler", e);
            JOptionPane.showMessageDialog(rootPane, "Invalid Marks !", "Error in Input", JOptionPane.ERROR_MESSAGE);
            writeUpTextField.grabFocus();
        }

    }//GEN-LAST:event_writeUpTextFieldFocusLost

    private void executionTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_executionTextFieldFocusLost
        try {
            if (Float.parseFloat(executionTextField.getText()) > 0) {
                total = total - execution + Float.parseFloat(executionTextField.getText());
                totalField.setText(String.valueOf(Math.round(total)));
                execution = Float.parseFloat(executionTextField.getText());
            }
        } catch (Exception e) {
            Logger.getLogger(MarksFinalizeView.class.getName()).log(Level.SEVERE, "Exception in executionTextFieldHandler", e);
            JOptionPane.showMessageDialog(rootPane, "Invalid Marks !", "Error in Input", JOptionPane.ERROR_MESSAGE);
            executionTextField.grabFocus();
        }
    }//GEN-LAST:event_executionTextFieldFocusLost

    private void UsnTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_UsnTextFieldFocusLost
        if (UsnTextField.getText().length() <= 0) {
            JOptionPane.showMessageDialog(rootPane, "Invalid USN !", "Error in Input", JOptionPane.ERROR_MESSAGE);
            question1Label.setText("");
            question1TextArea.setText("");
            question2Label.setText("");
            question2TextArea.setText("");
            question3Label.setText("");
            question3TextArea.setText("");
            question4Label.setText("");
            question4TextArea.setText("");
            question5Label.setText("");
            question5TextArea.setText("");
            question6Label.setText("");
            question6TextArea.setText("");
            question7Label.setText("");
            question7TextArea.setText("");
            question8Label.setText("");
            question8TextArea.setText("");
            question9Label.setText("");
            question9TextArea.setText("");
            question10Label.setText("");
            question10TextArea.setText("");
            marks1TextField.setEnabled(false);
            marks2TextField.setEnabled(false);
            marks3TextField.setEnabled(false);
            marks4TextField.setEnabled(false);
            marks5TextField.setEnabled(false);
            marks6TextField.setEnabled(false);
            marks7TextField.setEnabled(false);
            marks8TextField.setEnabled(false);
            marks9TextField.setEnabled(false);
            marks10TextField.setEnabled(false);
            writeUpTextField.setEnabled(false);
            executionTextField.setEnabled(false);
            marks1TextField.setText("");
            marks2TextField.setText("");
            marks3TextField.setText("");
            marks4TextField.setText("");
            marks5TextField.setText("");
            marks6TextField.setText("");
            marks7TextField.setText("");
            marks8TextField.setText("");
            marks9TextField.setText("");
            marks10TextField.setText("");
            writeUpTextField.setText("");
            executionTextField.setText("");
            vivaTextField.setText("");
            totalField.setText("");
        } else {
            try {
                Connection con = MyConnection.getConnection();
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery("select v.question, vm.answer from vivamap vm, viva v where vm.questionid = v.questionid and vm.usn = '" + UsnTextField.getText() + "'");
                if (rs.next()) {
                    question1Label.setText("Question 1 : " + rs.getString(1));
                    question1TextArea.setText(rs.getString(2));
                    rs.next();
                    question2Label.setText("Question 2 : " + rs.getString(1));
                    question2TextArea.setText(rs.getString(2));
                    rs.next();
                    question3Label.setText("Question 3 : " + rs.getString(1));
                    question3TextArea.setText(rs.getString(2));
                    rs.next();
                    question4Label.setText("Question 4 : " + rs.getString(1));
                    question4TextArea.setText(rs.getString(2));
                    rs.next();
                    question5Label.setText("Question 5 : " + rs.getString(1));
                    question5TextArea.setText(rs.getString(2));
                    rs.next();
                    question6Label.setText("Question 6 : " + rs.getString(1));
                    question6TextArea.setText(rs.getString(2));
                    rs.next();
                    question7Label.setText("Question 7 : " + rs.getString(1));
                    question7TextArea.setText(rs.getString(2));
                    rs.next();
                    question8Label.setText("Question 8 : " + rs.getString(1));
                    question8TextArea.setText(rs.getString(2));
                    rs.next();
                    question9Label.setText("Question 9 : " + rs.getString(1));
                    question9TextArea.setText(rs.getString(2));
                    rs.next();
                    question10Label.setText("Question 10 : " + rs.getString(1));
                    question10TextArea.setText(rs.getString(2));
                    marks1TextField.setEnabled(true);
                    marks2TextField.setEnabled(true);
                    marks3TextField.setEnabled(true);
                    marks4TextField.setEnabled(true);
                    marks5TextField.setEnabled(true);
                    marks6TextField.setEnabled(true);
                    marks7TextField.setEnabled(true);
                    marks8TextField.setEnabled(true);
                    marks9TextField.setEnabled(true);
                    marks10TextField.setEnabled(true);
                    writeUpTextField.setEnabled(true);
                    executionTextField.setEnabled(true);
                    marks1 = 0;
                    marks2 = 0;
                    marks3 = 0;
                    marks4 = 0;
                    marks5 = 0;
                    marks6 = 0;
                    marks7 = 0;
                    marks8 = 0;
                    marks9 = 0;
                    marks10 = 0;
                    writeup = 0;
                    execution = 0;
                    viva = 0;
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Invalid USN !", "Error in Input", JOptionPane.ERROR_MESSAGE);
                    question1Label.setText("");
                    question1TextArea.setText("");
                    question2Label.setText("");
                    question2TextArea.setText("");
                    question3Label.setText("");
                    question3TextArea.setText("");
                    question4Label.setText("");
                    question4TextArea.setText("");
                    question5Label.setText("");
                    question5TextArea.setText("");
                    question6Label.setText("");
                    question6TextArea.setText("");
                    question7Label.setText("");
                    question7TextArea.setText("");
                    question8Label.setText("");
                    question8TextArea.setText("");
                    question9Label.setText("");
                    question9TextArea.setText("");
                    question10Label.setText("");
                    question10TextArea.setText("");
                    marks1TextField.setText("");
                    marks2TextField.setText("");
                    marks3TextField.setText("");
                    marks4TextField.setText("");
                    marks5TextField.setText("");
                    marks6TextField.setText("");
                    marks7TextField.setText("");
                    marks8TextField.setText("");
                    marks9TextField.setText("");
                    marks10TextField.setText("");
                    marks1TextField.setEnabled(false);
                    marks2TextField.setEnabled(false);
                    marks3TextField.setEnabled(false);
                    marks4TextField.setEnabled(false);
                    marks5TextField.setEnabled(false);
                    marks6TextField.setEnabled(false);
                    marks7TextField.setEnabled(false);
                    marks8TextField.setEnabled(false);
                    marks9TextField.setEnabled(false);
                    marks10TextField.setEnabled(false);
                    writeUpTextField.setEnabled(false);
                    executionTextField.setEnabled(false);
                    writeUpTextField.setText("");
                    executionTextField.setText("");
                    vivaTextField.setText("");
                    totalField.setText("");
                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(MarksFinalizeView.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(MarksFinalizeView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_UsnTextFieldFocusLost

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try {
            if (UsnTextField.getText().length() > 0) {
                if (Float.parseFloat(marks1TextField.getText()) >= 0 && Float.parseFloat(marks2TextField.getText()) >= 0 && Float.parseFloat(marks3TextField.getText()) >= 0 && Float.parseFloat(marks4TextField.getText()) >= 0 && Float.parseFloat(marks5TextField.getText()) >= 0 && Float.parseFloat(marks6TextField.getText()) >= 0 && Float.parseFloat(marks7TextField.getText()) >= 0 && Float.parseFloat(marks8TextField.getText()) >= 0 && Float.parseFloat(marks9TextField.getText()) >= 0 && Float.parseFloat(marks10TextField.getText()) >= 0) {
                    Connection con = MyConnection.getConnection();
                    PreparedStatement ps = con.prepareCall("select * from batch where current = ?");
                    ps.setBoolean(1, true);
                    ResultSet rs = ps.executeQuery();
                    if (rs.next()) {
                        ps = con.prepareCall("insert into marks values(?,?,?,?,?)");
                        ps.setString(1, UsnTextField.getText());
                        ps.setFloat(2, Float.parseFloat(executionTextField.getText()));
                        ps.setFloat(3, Float.parseFloat(writeUpTextField.getText()));
                        ps.setFloat(4, Float.parseFloat(vivaTextField.getText()));
                        ps.setInt(5, rs.getInt(1));
                        ps.executeUpdate();
                        JOptionPane.showMessageDialog(rootPane, "Marks Saved Successfully !", "Success - Lab Assessment System v1.0b", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "No Current Batch specified !", "Error - Lab Assessment System v1.0b", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    Logger.getLogger(MarksFinalizeView.class.getName()).log(Level.SEVERE, "Erro in SaveButtonHandler");
                    JOptionPane.showMessageDialog(rootPane, "Invalid Marks", "Error - Lab Assessment System v1.0b", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Invalid USN", "Error - Lab Assessment System v1.0b", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException sqe) {
            Logger.getLogger(MarksFinalizeView.class.getName()).log(Level.SEVERE, null, sqe);
            JOptionPane.showMessageDialog(rootPane, "Marks Already Finalized.", "Error - Lab Assessment System v1.0b", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            Logger.getLogger(MarksFinalizeView.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(rootPane, "Invalid USN/Marks", "Error - Lab Assessment System v1.0b", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveButtonActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MarksFinalizeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MarksFinalizeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MarksFinalizeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MarksFinalizeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                MarksFinalizeView dialog = new MarksFinalizeView(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AnswerLabel;
    private javax.swing.JLabel MarksLabel;
    private javax.swing.JLabel QuestionLabel;
    private javax.swing.JLabel UsnLabel;
    private javax.swing.JTextField UsnTextField;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel executionLabel;
    private javax.swing.JTextField executionTextField;
    private javax.swing.JButton fetchButton;
    private javax.swing.JTextField marks10TextField;
    private javax.swing.JTextField marks1TextField;
    private javax.swing.JTextField marks2TextField;
    private javax.swing.JTextField marks3TextField;
    private javax.swing.JTextField marks4TextField;
    private javax.swing.JTextField marks5TextField;
    private javax.swing.JTextField marks6TextField;
    private javax.swing.JTextField marks7TextField;
    private javax.swing.JTextField marks8TextField;
    private javax.swing.JTextField marks9TextField;
    private javax.swing.JLabel question10Label;
    private javax.swing.JScrollPane question10Scroll;
    private javax.swing.JTextArea question10TextArea;
    private javax.swing.JLabel question1Label;
    private javax.swing.JScrollPane question1Scroll;
    private javax.swing.JTextArea question1TextArea;
    private javax.swing.JLabel question2Label;
    private javax.swing.JScrollPane question2Scroll;
    private javax.swing.JTextArea question2TextArea;
    private javax.swing.JLabel question3Label;
    private javax.swing.JScrollPane question3Scroll;
    private javax.swing.JTextArea question3TextArea;
    private javax.swing.JLabel question4Label;
    private javax.swing.JScrollPane question4Scroll;
    private javax.swing.JTextArea question4TextArea;
    private javax.swing.JLabel question5Label;
    private javax.swing.JScrollPane question5Scroll;
    private javax.swing.JTextArea question5TextArea;
    private javax.swing.JLabel question6Label;
    private javax.swing.JScrollPane question6Scroll;
    private javax.swing.JTextArea question6TextArea;
    private javax.swing.JLabel question7Label;
    private javax.swing.JScrollPane question7Scroll;
    private javax.swing.JTextArea question7TextArea;
    private javax.swing.JLabel question8Label;
    private javax.swing.JScrollPane question8Scroll;
    private javax.swing.JTextArea question8TextArea;
    private javax.swing.JLabel question9Label;
    private javax.swing.JScrollPane question9Scroll;
    private javax.swing.JTextArea question9TextArea;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JSeparator titleSeperator;
    private javax.swing.JTextField totalField;
    private javax.swing.JLabel totalLabel;
    private javax.swing.JLabel vivaLabel;
    private javax.swing.JTextField vivaTextField;
    private javax.swing.JTextField writeUpTextField;
    private javax.swing.JLabel writeupLabel;
    // End of variables declaration//GEN-END:variables
}
